// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: proto/service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BlockChainServiceClient is the client API for BlockChainService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BlockChainServiceClient interface {
	PrintBlocks(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error)
	AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*AddBlockResponse, error)
}

type blockChainServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBlockChainServiceClient(cc grpc.ClientConnInterface) BlockChainServiceClient {
	return &blockChainServiceClient{cc}
}

func (c *blockChainServiceClient) PrintBlocks(ctx context.Context, in *PrintRequest, opts ...grpc.CallOption) (*PrintResponse, error) {
	out := new(PrintResponse)
	err := c.cc.Invoke(ctx, "/proto.BlockChainService/PrintBlocks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *blockChainServiceClient) AddBlock(ctx context.Context, in *AddBlockRequest, opts ...grpc.CallOption) (*AddBlockResponse, error) {
	out := new(AddBlockResponse)
	err := c.cc.Invoke(ctx, "/proto.BlockChainService/AddBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BlockChainServiceServer is the server API for BlockChainService service.
// All implementations must embed UnimplementedBlockChainServiceServer
// for forward compatibility
type BlockChainServiceServer interface {
	PrintBlocks(context.Context, *PrintRequest) (*PrintResponse, error)
	AddBlock(context.Context, *AddBlockRequest) (*AddBlockResponse, error)
	mustEmbedUnimplementedBlockChainServiceServer()
}

// UnimplementedBlockChainServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBlockChainServiceServer struct {
}

func (UnimplementedBlockChainServiceServer) PrintBlocks(context.Context, *PrintRequest) (*PrintResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrintBlocks not implemented")
}
func (UnimplementedBlockChainServiceServer) AddBlock(context.Context, *AddBlockRequest) (*AddBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlock not implemented")
}
func (UnimplementedBlockChainServiceServer) mustEmbedUnimplementedBlockChainServiceServer() {}

// UnsafeBlockChainServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BlockChainServiceServer will
// result in compilation errors.
type UnsafeBlockChainServiceServer interface {
	mustEmbedUnimplementedBlockChainServiceServer()
}

func RegisterBlockChainServiceServer(s grpc.ServiceRegistrar, srv BlockChainServiceServer) {
	s.RegisterService(&BlockChainService_ServiceDesc, srv)
}

func _BlockChainService_PrintBlocks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PrintRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).PrintBlocks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChainService/PrintBlocks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).PrintBlocks(ctx, req.(*PrintRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BlockChainService_AddBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBlockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BlockChainServiceServer).AddBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.BlockChainService/AddBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BlockChainServiceServer).AddBlock(ctx, req.(*AddBlockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BlockChainService_ServiceDesc is the grpc.ServiceDesc for BlockChainService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BlockChainService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.BlockChainService",
	HandlerType: (*BlockChainServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PrintBlocks",
			Handler:    _BlockChainService_PrintBlocks_Handler,
		},
		{
			MethodName: "AddBlock",
			Handler:    _BlockChainService_AddBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
